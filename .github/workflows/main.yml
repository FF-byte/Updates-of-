name: FREE FIRE RIPPER

on:
  workflow_dispatch:
    inputs:
      code:
        description: Paste Chrome Remote Desktop Code
        required: true

jobs:
  build:
    name: Free Fire Ripper Lab Running
    runs-on: windows-latest
    timeout-minutes: 43800

    steps:
    - name: Disable Firewall Profiles
      run: |
        try {
          Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False
        } catch {
          Write-Host "Failed to disable firewall. Continuing..."
        }

    - name: Install Necessary Packages
      run: |
        function Install-PackageWithRetry {
            param ([string]$packageName)
            $maxRetries = 3
            $retryCount = 0
            while ($retryCount -lt $maxRetries) {
                try {
                    choco install $packageName -y --ignore-checksums
                    return
                } catch {
                    Write-Host "Retrying $packageName install ($($retryCount+1)/$maxRetries)"
                    Start-Sleep -Seconds 10
                    $retryCount++
                }
            }
            throw "$packageName failed to install via Chocolatey after multiple attempts."
        }
        Install-PackageWithRetry -packageName "chrome-remote-desktop-host"
        Install-PackageWithRetry -packageName "googlechrome"

    - name: Download and Install MSI App Player
      run: |
        $msiZipUrl = "https://download.msi.com/uti_exe/nb/MSI-APP-Player.zip"
        $downloadPath = "$Env:USERPROFILE\Downloads\MSI-APP-Player.zip"
        $extractPath = "$Env:USERPROFILE\Downloads\MSI-APP-Player"

        # Download MSI App Player zip
        Invoke-WebRequest -Uri $msiZipUrl -OutFile $downloadPath
        Write-Host "MSI App Player zip downloaded successfully."

        # Extract zip file
        Expand-Archive -Path $downloadPath -DestinationPath $extractPath -Force
        Write-Host "MSI App Player extracted successfully."

        # List files in the extracted folder (for debugging)
        Write-Host "Listing extracted files to locate installer..."
        Get-ChildItem -Path $extractPath -Recurse | ForEach-Object { Write-Host $_.FullName }

        # Locate the installer dynamically
        $installerPath = Get-ChildItem -Path $extractPath -Recurse -Filter "*.exe" | Select-Object -First 1 -ExpandProperty FullName
        if ($installerPath) {
            Write-Host "Installer found at: $installerPath"
            Start-Process -FilePath $installerPath -ArgumentList "/silent" -Wait
            Write-Host "MSI App Player installed successfully."
        } else {
            Write-Host "Installer not found in the extracted files. Installation failed."
            exit 1
        }

    - name: Download and Install Free Fire APK
      run: |
        $apkUrl = "https://dl.cdn.freefiremobile.com/live/package/FreeFire.apk"
        $apkPath = "$Env:USERPROFILE\Downloads\FreeFire.apk"
        Invoke-WebRequest -Uri $apkUrl -OutFile $apkPath
        Write-Host "Free Fire APK downloaded successfully."

    - name: Set Desktop Wallpaper
      run: |
        $wallpaperUrl = "https://i.ibb.co/7QBjY1q/20241214-020008.jpg"
        $wallpaperPath = "$Env:USERPROFILE\Pictures\wallpaper.jpg"

        # Download the wallpaper
        Invoke-WebRequest -Uri $wallpaperUrl -OutFile $wallpaperPath

        # Set the wallpaper (using Set-ItemProperty for Windows 10)
        Add-Type -TypeDefinition @"
        using System;
        using System.Runtime.InteropServices;
        public class Wallpaper {
            [DllImport("user32.dll", CharSet = CharSet.Auto)]
            public static extern int SystemParametersInfo(int uAction, int uParam, string lpvParam, int fuWinIni);
        }
        "@

        $SPI_SETDESKWALLPAPER = 20
        $SPIF_UPDATEINIFILE = 1
        $SPIF_SENDCHANGE = 2

        [Wallpaper]::SystemParametersInfo($SPI_SETDESKWALLPAPER, 0, $wallpaperPath, $SPIF_UPDATEINIFILE -bor $SPIF_SENDCHANGE)
        Write-Host "Wallpaper set successfully."

    - name: Keep Connection Active
      run: |
        $i = 43800
        do {
            Write-Host $i
            Start-Sleep 60
            $i--
        } while ($i -gt 0)
